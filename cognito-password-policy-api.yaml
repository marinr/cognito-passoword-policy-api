AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito Utility API

Parameters:
  UserPoolId: {Type: String}
  Environment: {Default: Dev, Type: String}
Resources:    
  UtilityApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: !Ref Environment
        DefinitionBody:
            swagger: 2.0
            info:
              description: Cognito Utility API provides information and utility services for Cognito
              version: 1.0.0
              title: Cognito Utility API
              contact:
                email: marin.radjenovic@alite-international.com
            paths:
              cognito/password/policy:
                get:
                  tags:
                  - "cognito_password_policy_requirement"
                  summary: "retrive cognito password policy"
                  description: "This service provides ability for frontend to deliver password policy"
                  operationId: "getPasswordPolicy"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "OK"
                      headers: 
                        Access-Control-Allow-Origin:
                          type: "string"
                    "500":
                      description: "Server Error"
                      headers: 
                        Access-Control-Allow-Origin:
                          type: "string"
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: AWS
                    uri: !Sub  "arn:aws:apigateway:${AWS::Region}:cognito-idp:action/DescribeUserPool"
                    credentials: !GetAtt CognitoExecutionRole.Arn
                    requestTemplates:
                      application/json:
                           !Sub |-
                            {
                              "UserPoolId": "${UserPoolId}"
                            }
                    responses: 
                      default: 
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                        responseTemplates: 
                          application/json: |-
                              #set($inputRoot = $input.path('$'))
                              {
                                "policy": {
                                        "minimumLength": "$inputRoot.UserPool.Policies.PasswordPolicy.MinimumLength",
                                        "requireLowercase": "$inputRoot.UserPool.Policies.PasswordPolicy.RequireLowercase",
                                        "requireNumbers": "$inputRoot.UserPool.Policies.PasswordPolicy.RequireNumbers",
                                        "requireSymbols": "$inputRoot.UserPool.Policies.PasswordPolicy.RequireSymbols",
                                        "requireUppercase": "$inputRoot.UserPool.Policies.PasswordPolicy.RequireUppercase",
                                        "temporaryPasswordValidityDays": "$inputRoot.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays"
                                }
                              }
                        statusCode: "200"

  CognitoExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:DescribeUserPool
            Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'

                    
    
                    
              